{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, Input, ViewChild, NgModule } from '@angular/core';\nimport JsBarcode from 'jsbarcode';\nconst _c0 = [\"bcElement\"];\nlet NgxBarcodeComponent = /*#__PURE__*/(() => {\n  class NgxBarcodeComponent {\n    constructor(renderer) {\n      this.renderer = renderer;\n      this.elementType = 'svg';\n      // this should be done more elegantly\n      this.cssClass = 'barcode';\n      this.format = 'CODE128';\n      this.lineColor = '#000000';\n      this.width = 2;\n      this.height = 100;\n      this.displayValue = false;\n      this.fontOptions = '';\n      this.font = 'monospace';\n      this.textAlign = 'center';\n      this.textPosition = 'bottom';\n      this.textMargin = 2;\n      this.fontSize = 20;\n      this.background = '#ffffff';\n      this.margin = 10;\n      this.marginTop = 10;\n      this.marginBottom = 10;\n      this.marginLeft = 10;\n      this.marginRight = 10;\n      this.value = '';\n      this.valid = () => true;\n    }\n    get options() {\n      return {\n        format: this.format,\n        lineColor: this.lineColor,\n        width: this.width,\n        height: this.height,\n        displayValue: this.displayValue,\n        fontOptions: this.fontOptions,\n        font: this.font,\n        textAlign: this.textAlign,\n        textPosition: this.textPosition,\n        textMargin: this.textMargin,\n        fontSize: this.fontSize,\n        background: this.background,\n        margin: this.margin,\n        marginTop: this.marginTop,\n        marginBottom: this.marginBottom,\n        marginLeft: this.marginLeft,\n        marginRight: this.marginRight,\n        valid: this.valid\n      };\n    }\n    ngOnChanges() {\n      this.createBarcode();\n    }\n    createBarcode() {\n      if (!this.value) {\n        return;\n      }\n      let element;\n      switch (this.elementType) {\n        case 'img':\n          element = this.renderer.createElement('img');\n          break;\n        case 'canvas':\n          element = this.renderer.createElement('canvas');\n          break;\n        case 'svg':\n        default:\n          element = this.renderer.createElement('svg', 'svg');\n      }\n      JsBarcode(element, this.value, this.options);\n      for (let node of this.bcElement.nativeElement.childNodes) {\n        this.renderer.removeChild(this.bcElement.nativeElement, node);\n      }\n      this.renderer.appendChild(this.bcElement.nativeElement, element);\n    }\n  }\n  NgxBarcodeComponent.ɵfac = function NgxBarcodeComponent_Factory(t) {\n    return new (t || NgxBarcodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  NgxBarcodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxBarcodeComponent,\n    selectors: [[\"ngx-barcode\"]],\n    viewQuery: function NgxBarcodeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bcElement = _t.first);\n      }\n    },\n    inputs: {\n      elementType: [\"bc-element-type\", \"elementType\"],\n      cssClass: [\"bc-class\", \"cssClass\"],\n      format: [\"bc-format\", \"format\"],\n      lineColor: [\"bc-line-color\", \"lineColor\"],\n      width: [\"bc-width\", \"width\"],\n      height: [\"bc-height\", \"height\"],\n      displayValue: [\"bc-display-value\", \"displayValue\"],\n      fontOptions: [\"bc-font-options\", \"fontOptions\"],\n      font: [\"bc-font\", \"font\"],\n      textAlign: [\"bc-text-align\", \"textAlign\"],\n      textPosition: [\"bc-text-position\", \"textPosition\"],\n      textMargin: [\"bc-text-margin\", \"textMargin\"],\n      fontSize: [\"bc-font-size\", \"fontSize\"],\n      background: [\"bc-background\", \"background\"],\n      margin: [\"bc-margin\", \"margin\"],\n      marginTop: [\"bc-margin-top\", \"marginTop\"],\n      marginBottom: [\"bc-margin-bottom\", \"marginBottom\"],\n      marginLeft: [\"bc-margin-left\", \"marginLeft\"],\n      marginRight: [\"bc-margin-right\", \"marginRight\"],\n      value: [\"bc-value\", \"value\"],\n      valid: [\"bc-valid\", \"valid\"]\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"bcElement\", \"\"]],\n    template: function NgxBarcodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cssClass);\n      }\n    },\n    encapsulation: 2\n  });\n  return NgxBarcodeComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxBarcodeModule = /*#__PURE__*/(() => {\n  class NgxBarcodeModule {\n    // TODO why is this a separate `forRoot`?\n    static forRoot() {\n      return {\n        ngModule: NgxBarcodeModule,\n        providers: []\n      };\n    }\n  }\n  NgxBarcodeModule.ɵfac = function NgxBarcodeModule_Factory(t) {\n    return new (t || NgxBarcodeModule)();\n  };\n  NgxBarcodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxBarcodeModule\n  });\n  NgxBarcodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return NgxBarcodeModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ngx-barcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxBarcodeComponent, NgxBarcodeModule };\n//# sourceMappingURL=greatcloak-ngx-barcode.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
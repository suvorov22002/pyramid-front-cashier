{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CODE39 = undefined;\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _Barcode2 = require(\"../Barcode.js\");\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Encoding documentation:\n// https://en.wikipedia.org/wiki/Code_39#Encoding\n\nvar CODE39 = function (_Barcode) {\n  _inherits(CODE39, _Barcode);\n  function CODE39(data, options) {\n    _classCallCheck(this, CODE39);\n    data = data.toUpperCase();\n\n    // Calculate mod43 checksum if enabled\n    if (options.mod43) {\n      data += getCharacter(mod43checksum(data));\n    }\n    return _possibleConstructorReturn(this, (CODE39.__proto__ || Object.getPrototypeOf(CODE39)).call(this, data, options));\n  }\n  _createClass(CODE39, [{\n    key: \"encode\",\n    value: function encode() {\n      // First character is always a *\n      var result = getEncoding(\"*\");\n\n      // Take every character and add the binary representation to the result\n      for (var i = 0; i < this.data.length; i++) {\n        result += getEncoding(this.data[i]) + \"0\";\n      }\n\n      // Last character is always a *\n      result += getEncoding(\"*\");\n      return {\n        data: result,\n        text: this.text\n      };\n    }\n  }, {\n    key: \"valid\",\n    value: function valid() {\n      return this.data.search(/^[0-9A-Z\\-\\.\\ \\$\\/\\+\\%]+$/) !== -1;\n    }\n  }]);\n  return CODE39;\n}(_Barcode3.default);\n\n// All characters. The position in the array is the (checksum) value\n\nvar characters = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"-\", \".\", \" \", \"$\", \"/\", \"+\", \"%\", \"*\"];\n\n// The decimal representation of the characters, is converted to the\n// corresponding binary with the getEncoding function\nvar encodings = [20957, 29783, 23639, 30485, 20951, 29813, 23669, 20855, 29789, 23645, 29975, 23831, 30533, 22295, 30149, 24005, 21623, 29981, 23837, 22301, 30023, 23879, 30545, 22343, 30161, 24017, 21959, 30065, 23921, 22385, 29015, 18263, 29141, 17879, 29045, 18293, 17783, 29021, 18269, 17477, 17489, 17681, 20753, 35770];\n\n// Get the binary representation of a character by converting the encodings\n// from decimal to binary\nfunction getEncoding(character) {\n  return getBinary(characterValue(character));\n}\nfunction getBinary(characterValue) {\n  return encodings[characterValue].toString(2);\n}\nfunction getCharacter(characterValue) {\n  return characters[characterValue];\n}\nfunction characterValue(character) {\n  return characters.indexOf(character);\n}\nfunction mod43checksum(data) {\n  var checksum = 0;\n  for (var i = 0; i < data.length; i++) {\n    checksum += characterValue(data[i]);\n  }\n  checksum = checksum % 43;\n  return checksum;\n}\nexports.CODE39 = CODE39;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _merge = require(\"../help/merge.js\");\nvar _merge2 = _interopRequireDefault(_merge);\nvar _shared = require(\"./shared.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar CanvasRenderer = function () {\n  function CanvasRenderer(canvas, encodings, options) {\n    _classCallCheck(this, CanvasRenderer);\n    this.canvas = canvas;\n    this.encodings = encodings;\n    this.options = options;\n  }\n  _createClass(CanvasRenderer, [{\n    key: \"render\",\n    value: function render() {\n      // Abort if the browser does not support HTML5 canvas\n      if (!this.canvas.getContext) {\n        throw new Error('The browser does not support canvas.');\n      }\n      this.prepareCanvas();\n      for (var i = 0; i < this.encodings.length; i++) {\n        var encodingOptions = (0, _merge2.default)(this.options, this.encodings[i].options);\n        this.drawCanvasBarcode(encodingOptions, this.encodings[i]);\n        this.drawCanvasText(encodingOptions, this.encodings[i]);\n        this.moveCanvasDrawing(this.encodings[i]);\n      }\n      this.restoreCanvas();\n    }\n  }, {\n    key: \"prepareCanvas\",\n    value: function prepareCanvas() {\n      // Get the canvas context\n      var ctx = this.canvas.getContext(\"2d\");\n      ctx.save();\n      (0, _shared.calculateEncodingAttributes)(this.encodings, this.options, ctx);\n      var totalWidth = (0, _shared.getTotalWidthOfEncodings)(this.encodings);\n      var maxHeight = (0, _shared.getMaximumHeightOfEncodings)(this.encodings);\n      this.canvas.width = totalWidth + this.options.marginLeft + this.options.marginRight;\n      this.canvas.height = maxHeight;\n\n      // Paint the canvas\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      if (this.options.background) {\n        ctx.fillStyle = this.options.background;\n        ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n      }\n      ctx.translate(this.options.marginLeft, 0);\n    }\n  }, {\n    key: \"drawCanvasBarcode\",\n    value: function drawCanvasBarcode(options, encoding) {\n      // Get the canvas context\n      var ctx = this.canvas.getContext(\"2d\");\n      var binary = encoding.data;\n\n      // Creates the barcode out of the encoded binary\n      var yFrom;\n      if (options.textPosition == \"top\") {\n        yFrom = options.marginTop + options.fontSize + options.textMargin;\n      } else {\n        yFrom = options.marginTop;\n      }\n      ctx.fillStyle = options.lineColor;\n      for (var b = 0; b < binary.length; b++) {\n        var x = b * options.width + encoding.barcodePadding;\n        if (binary[b] === \"1\") {\n          ctx.fillRect(x, yFrom, options.width, options.height);\n        } else if (binary[b]) {\n          ctx.fillRect(x, yFrom, options.width, options.height * binary[b]);\n        }\n      }\n    }\n  }, {\n    key: \"drawCanvasText\",\n    value: function drawCanvasText(options, encoding) {\n      // Get the canvas context\n      var ctx = this.canvas.getContext(\"2d\");\n      var font = options.fontOptions + \" \" + options.fontSize + \"px \" + options.font;\n\n      // Draw the text if displayValue is set\n      if (options.displayValue) {\n        var x, y;\n        if (options.textPosition == \"top\") {\n          y = options.marginTop + options.fontSize - options.textMargin;\n        } else {\n          y = options.height + options.textMargin + options.marginTop + options.fontSize;\n        }\n        ctx.font = font;\n\n        // Draw the text in the correct X depending on the textAlign option\n        if (options.textAlign == \"left\" || encoding.barcodePadding > 0) {\n          x = 0;\n          ctx.textAlign = 'left';\n        } else if (options.textAlign == \"right\") {\n          x = encoding.width - 1;\n          ctx.textAlign = 'right';\n        }\n        // In all other cases, center the text\n        else {\n          x = encoding.width / 2;\n          ctx.textAlign = 'center';\n        }\n        ctx.fillText(encoding.text, x, y);\n      }\n    }\n  }, {\n    key: \"moveCanvasDrawing\",\n    value: function moveCanvasDrawing(encoding) {\n      var ctx = this.canvas.getContext(\"2d\");\n      ctx.translate(encoding.width, 0);\n    }\n  }, {\n    key: \"restoreCanvas\",\n    value: function restoreCanvas() {\n      // Get the canvas context\n      var ctx = this.canvas.getContext(\"2d\");\n      ctx.restore();\n    }\n  }]);\n  return CanvasRenderer;\n}();\nexports.default = CanvasRenderer;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
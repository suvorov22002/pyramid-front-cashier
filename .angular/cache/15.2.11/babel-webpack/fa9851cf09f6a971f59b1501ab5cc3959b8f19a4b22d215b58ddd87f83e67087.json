{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _Barcode2 = require('../Barcode.js');\nvar _Barcode3 = _interopRequireDefault(_Barcode2);\nvar _constants = require('./constants');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\n// This is the master class,\n// it does require the start code to be included in the string\nvar CODE128 = function (_Barcode) {\n  _inherits(CODE128, _Barcode);\n  function CODE128(data, options) {\n    _classCallCheck(this, CODE128);\n\n    // Get array of ascii codes from data\n    var _this = _possibleConstructorReturn(this, (CODE128.__proto__ || Object.getPrototypeOf(CODE128)).call(this, data.substring(1), options));\n    _this.bytes = data.split('').map(function (char) {\n      return char.charCodeAt(0);\n    });\n    return _this;\n  }\n  _createClass(CODE128, [{\n    key: 'valid',\n    value: function valid() {\n      // ASCII value ranges 0-127, 200-211\n      return /^[\\x00-\\x7F\\xC8-\\xD3]+$/.test(this.data);\n    }\n\n    // The public encoding function\n  }, {\n    key: 'encode',\n    value: function encode() {\n      var bytes = this.bytes;\n      // Remove the start code from the bytes and set its index\n      var startIndex = bytes.shift() - 105;\n      // Get start set by index\n      var startSet = _constants.SET_BY_CODE[startIndex];\n      if (startSet === undefined) {\n        throw new RangeError('The encoding does not start with a start character.');\n      }\n      if (this.shouldEncodeAsEan128() === true) {\n        bytes.unshift(_constants.FNC1);\n      }\n\n      // Start encode with the right type\n      var encodingResult = CODE128.next(bytes, 1, startSet);\n      return {\n        text: this.text === this.data ? this.text.replace(/[^\\x20-\\x7E]/g, '') : this.text,\n        data:\n        // Add the start bits\n        CODE128.getBar(startIndex) +\n        // Add the encoded bits\n        encodingResult.result +\n        // Add the checksum\n        CODE128.getBar((encodingResult.checksum + startIndex) % _constants.MODULO) +\n        // Add the end bits\n        CODE128.getBar(_constants.STOP)\n      };\n    }\n\n    // GS1-128/EAN-128\n  }, {\n    key: 'shouldEncodeAsEan128',\n    value: function shouldEncodeAsEan128() {\n      var isEAN128 = this.options.ean128 || false;\n      if (typeof isEAN128 === 'string') {\n        isEAN128 = isEAN128.toLowerCase() === 'true';\n      }\n      return isEAN128;\n    }\n\n    // Get a bar symbol by index\n  }], [{\n    key: 'getBar',\n    value: function getBar(index) {\n      return _constants.BARS[index] ? _constants.BARS[index].toString() : '';\n    }\n\n    // Correct an index by a set and shift it from the bytes array\n  }, {\n    key: 'correctIndex',\n    value: function correctIndex(bytes, set) {\n      if (set === _constants.SET_A) {\n        var charCode = bytes.shift();\n        return charCode < 32 ? charCode + 64 : charCode - 32;\n      } else if (set === _constants.SET_B) {\n        return bytes.shift() - 32;\n      } else {\n        return (bytes.shift() - 48) * 10 + bytes.shift() - 48;\n      }\n    }\n  }, {\n    key: 'next',\n    value: function next(bytes, pos, set) {\n      if (!bytes.length) {\n        return {\n          result: '',\n          checksum: 0\n        };\n      }\n      var nextCode = void 0,\n        index = void 0;\n\n      // Special characters\n      if (bytes[0] >= 200) {\n        index = bytes.shift() - 105;\n        var nextSet = _constants.SWAP[index];\n\n        // Swap to other set\n        if (nextSet !== undefined) {\n          nextCode = CODE128.next(bytes, pos + 1, nextSet);\n        }\n        // Continue on current set but encode a special character\n        else {\n          // Shift\n          if ((set === _constants.SET_A || set === _constants.SET_B) && index === _constants.SHIFT) {\n            // Convert the next character so that is encoded correctly\n            bytes[0] = set === _constants.SET_A ? bytes[0] > 95 ? bytes[0] - 96 : bytes[0] : bytes[0] < 32 ? bytes[0] + 96 : bytes[0];\n          }\n          nextCode = CODE128.next(bytes, pos + 1, set);\n        }\n      }\n      // Continue encoding\n      else {\n        index = CODE128.correctIndex(bytes, set);\n        nextCode = CODE128.next(bytes, pos + 1, set);\n      }\n\n      // Get the correct binary encoding and calculate the weight\n      var enc = CODE128.getBar(index);\n      var weight = index * pos;\n      return {\n        result: enc + nextCode.result,\n        checksum: weight + nextCode.checksum\n      };\n    }\n  }]);\n  return CODE128;\n}(_Barcode3.default);\nexports.default = CODE128;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
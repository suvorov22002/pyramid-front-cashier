{"ast":null,"code":"'use strict';\n\nvar _barcodes = require('./barcodes/');\nvar _barcodes2 = _interopRequireDefault(_barcodes);\nvar _merge = require('./help/merge.js');\nvar _merge2 = _interopRequireDefault(_merge);\nvar _linearizeEncodings = require('./help/linearizeEncodings.js');\nvar _linearizeEncodings2 = _interopRequireDefault(_linearizeEncodings);\nvar _fixOptions = require('./help/fixOptions.js');\nvar _fixOptions2 = _interopRequireDefault(_fixOptions);\nvar _getRenderProperties = require('./help/getRenderProperties.js');\nvar _getRenderProperties2 = _interopRequireDefault(_getRenderProperties);\nvar _optionsFromStrings = require('./help/optionsFromStrings.js');\nvar _optionsFromStrings2 = _interopRequireDefault(_optionsFromStrings);\nvar _ErrorHandler = require('./exceptions/ErrorHandler.js');\nvar _ErrorHandler2 = _interopRequireDefault(_ErrorHandler);\nvar _exceptions = require('./exceptions/exceptions.js');\nvar _defaults = require('./options/defaults.js');\nvar _defaults2 = _interopRequireDefault(_defaults);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\n// The protype of the object returned from the JsBarcode() call\n\n// Help functions\nvar API = function API() {};\n\n// The first call of the library API\n// Will return an object with all barcodes calls and the data that is used\n// by the renderers\n\n// Default values\n\n// Exceptions\n// Import all the barcodes\nvar JsBarcode = function JsBarcode(element, text, options) {\n  var api = new API();\n  if (typeof element === \"undefined\") {\n    throw Error(\"No element to render on was provided.\");\n  }\n\n  // Variables that will be pased through the API calls\n  api._renderProperties = (0, _getRenderProperties2.default)(element);\n  api._encodings = [];\n  api._options = _defaults2.default;\n  api._errorHandler = new _ErrorHandler2.default(api);\n\n  // If text is set, use the simple syntax (render the barcode directly)\n  if (typeof text !== \"undefined\") {\n    options = options || {};\n    if (!options.format) {\n      options.format = autoSelectBarcode();\n    }\n    api.options(options)[options.format](text, options).render();\n  }\n  return api;\n};\n\n// To make tests work TODO: remove\nJsBarcode.getModule = function (name) {\n  return _barcodes2.default[name];\n};\n\n// Register all barcodes\nfor (var name in _barcodes2.default) {\n  if (_barcodes2.default.hasOwnProperty(name)) {\n    // Security check if the propery is a prototype property\n    registerBarcode(_barcodes2.default, name);\n  }\n}\nfunction registerBarcode(barcodes, name) {\n  API.prototype[name] = API.prototype[name.toUpperCase()] = API.prototype[name.toLowerCase()] = function (text, options) {\n    var api = this;\n    return api._errorHandler.wrapBarcodeCall(function () {\n      // Ensure text is options.text\n      options.text = typeof options.text === 'undefined' ? undefined : '' + options.text;\n      var newOptions = (0, _merge2.default)(api._options, options);\n      newOptions = (0, _optionsFromStrings2.default)(newOptions);\n      var Encoder = barcodes[name];\n      var encoded = encode(text, Encoder, newOptions);\n      api._encodings.push(encoded);\n      return api;\n    });\n  };\n}\n\n// encode() handles the Encoder call and builds the binary string to be rendered\nfunction encode(text, Encoder, options) {\n  // Ensure that text is a string\n  text = \"\" + text;\n  var encoder = new Encoder(text, options);\n\n  // If the input is not valid for the encoder, throw error.\n  // If the valid callback option is set, call it instead of throwing error\n  if (!encoder.valid()) {\n    throw new _exceptions.InvalidInputException(encoder.constructor.name, text);\n  }\n\n  // Make a request for the binary data (and other infromation) that should be rendered\n  var encoded = encoder.encode();\n\n  // Encodings can be nestled like [[1-1, 1-2], 2, [3-1, 3-2]\n  // Convert to [1-1, 1-2, 2, 3-1, 3-2]\n  encoded = (0, _linearizeEncodings2.default)(encoded);\n\n  // Merge\n  for (var i = 0; i < encoded.length; i++) {\n    encoded[i].options = (0, _merge2.default)(options, encoded[i].options);\n  }\n  return encoded;\n}\nfunction autoSelectBarcode() {\n  // If CODE128 exists. Use it\n  if (_barcodes2.default[\"CODE128\"]) {\n    return \"CODE128\";\n  }\n\n  // Else, take the first (probably only) barcode\n  return Object.keys(_barcodes2.default)[0];\n}\n\n// Sets global encoder options\n// Added to the api by the JsBarcode function\nAPI.prototype.options = function (options) {\n  this._options = (0, _merge2.default)(this._options, options);\n  return this;\n};\n\n// Will create a blank space (usually in between barcodes)\nAPI.prototype.blank = function (size) {\n  var zeroes = new Array(size + 1).join(\"0\");\n  this._encodings.push({\n    data: zeroes\n  });\n  return this;\n};\n\n// Initialize JsBarcode on all HTML elements defined.\nAPI.prototype.init = function () {\n  // Should do nothing if no elements where found\n  if (!this._renderProperties) {\n    return;\n  }\n\n  // Make sure renderProperies is an array\n  if (!Array.isArray(this._renderProperties)) {\n    this._renderProperties = [this._renderProperties];\n  }\n  var renderProperty;\n  for (var i in this._renderProperties) {\n    renderProperty = this._renderProperties[i];\n    var options = (0, _merge2.default)(this._options, renderProperty.options);\n    if (options.format == \"auto\") {\n      options.format = autoSelectBarcode();\n    }\n    this._errorHandler.wrapBarcodeCall(function () {\n      var text = options.value;\n      var Encoder = _barcodes2.default[options.format.toUpperCase()];\n      var encoded = encode(text, Encoder, options);\n      render(renderProperty, encoded, options);\n    });\n  }\n};\n\n// The render API call. Calls the real render function.\nAPI.prototype.render = function () {\n  if (!this._renderProperties) {\n    throw new _exceptions.NoElementException();\n  }\n  if (Array.isArray(this._renderProperties)) {\n    for (var i = 0; i < this._renderProperties.length; i++) {\n      render(this._renderProperties[i], this._encodings, this._options);\n    }\n  } else {\n    render(this._renderProperties, this._encodings, this._options);\n  }\n  return this;\n};\nAPI.prototype._defaults = _defaults2.default;\n\n// Prepares the encodings and calls the renderer\nfunction render(renderProperties, encodings, options) {\n  encodings = (0, _linearizeEncodings2.default)(encodings);\n  for (var i = 0; i < encodings.length; i++) {\n    encodings[i].options = (0, _merge2.default)(options, encodings[i].options);\n    (0, _fixOptions2.default)(encodings[i].options);\n  }\n  (0, _fixOptions2.default)(options);\n  var Renderer = renderProperties.renderer;\n  var renderer = new Renderer(renderProperties.element, encodings, options);\n  renderer.render();\n  if (renderProperties.afterRender) {\n    renderProperties.afterRender();\n  }\n}\n\n// Export to browser\nif (typeof window !== \"undefined\") {\n  window.JsBarcode = JsBarcode;\n}\n\n// Export to jQuery\n/*global jQuery */\nif (typeof jQuery !== 'undefined') {\n  jQuery.fn.JsBarcode = function (content, options) {\n    var elementArray = [];\n    jQuery(this).each(function () {\n      elementArray.push(this);\n    });\n    return JsBarcode(elementArray, content, options);\n  };\n}\n\n// Export to commonJS\nmodule.exports = JsBarcode;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
{"ast":null,"code":"var _a;\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component, ElementRef, VERSION, ViewChild } from '@angular/core';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { Statut } from 'app/@core/data';\nlet PaymentComponent = class PaymentComponent {\n  constructor(bettingservice) {\n    this.bettingservice = bettingservice;\n    this.displayedColumns = ['event', 'odd', 'game', 'selection', 'resultat', 'prix', 'coefficient'];\n    this.dataSource = new MatTableDataSource();\n    this.isLoading = false;\n    this.show = false;\n    this.isBarcodeLength = true;\n    this.isVersement = true;\n    this.isChecked = false;\n    this.isBonus = false;\n  }\n  ngOnInit() {\n    var name = 'Angular ' + VERSION.major;\n    setTimeout(() => {\n      this.barcode.nativeElement.focus();\n    }, 0);\n    //this.dataSource.data = this.allEvents;\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n  onCheckBarcode(barcode) {\n    this.isLoading = true;\n    this.bettingservice.checkKenoBet(barcode).subscribe(res => {\n      console.log(\"res\", res);\n      if (res !== undefined && res !== null) {\n        setTimeout(() => {\n          var _a, _b, _c, _d;\n          this.isLoading = false;\n          this.isChecked = true;\n          if (res.bonusAmount !== undefined || res.bonusAmount !== 0) {\n            this.bonusAmount = res.bonusAmount;\n            this.isBonus = true;\n          }\n          console.log(\"STATUS: \" + res.status);\n          switch (res.status) {\n            case Statut.TCKNRECON:\n              this.message = Statut.TCKNRECON;\n              break;\n            case Statut.TCKNEVAL:\n              this.message = Statut.TCKNEVAL;\n              this.dataSource.data = res.slips;\n              this.miseTotale = res.montantMise;\n              this.prixTotal = (_a = res.slips[0]) === null || _a === void 0 ? void 0 : _a.prix;\n              break;\n            case Statut.TCKALRPAID:\n              this.message = Statut.TCKGAGNANT;\n              this.statutVersement = Statut.TCKALRPAID;\n              this.dataSource.data = res.slips;\n              this.miseTotale = res.montantMise;\n              this.prixTotal = (_b = res.slips[0]) === null || _b === void 0 ? void 0 : _b.prix;\n              this.montantGain = res.montantGainMax;\n              this.isVersement = true;\n              break;\n            case Statut.TCKGAGNANT:\n              this.message = Statut.TCKGAGNANT;\n              //this.statutVersement = Statut.TCKGAGNANT;\n              this.dataSource.data = res.slips;\n              this.miseTotale = res.montantMise;\n              this.prixTotal = (_c = res.slips[0]) === null || _c === void 0 ? void 0 : _c.prix;\n              this.montantGain = res.montantGainMax;\n              this.isVersement = false;\n              break;\n            case Statut.TCKPERDANT:\n              this.message = Statut.TCKPERDANT;\n              //this.statutVersement = Statut.TCKPERDANT;\n              this.dataSource.data = res.slips;\n              this.miseTotale = res.montantMise;\n              this.prixTotal = (_d = res.slips[0]) === null || _d === void 0 ? void 0 : _d.prix;\n              this.montantGain = res.montantGainMax;\n              this.isVersement = true;\n              break;\n            default:\n              this.message = Statut.TCKNRECON;\n          }\n          this.isVersement = !(this.statutVersement != Statut.TCKALRPAID && this.montantGain > 0 || this.message === 'PERDANT');\n        }, 5000);\n      } else {\n        this.isLoading = false;\n        this.isChecked = true;\n        this.message = Statut.TCKNRECON;\n        return;\n      }\n    }, error => {\n      this.isLoading = false;\n      console.log(error);\n    });\n  }\n  validateBarcode() {\n    return this.isBarcodeLength;\n  }\n  onPaiement() {\n    console.log(\"paiement\");\n  }\n  onCancel() {\n    console.log(this.barcode.nativeElement.value);\n    this.dataSource.data = [];\n    this.bonusAmount = '';\n    this.statutVersement = '';\n    this.isVersement = true;\n    this.isChecked = false;\n    this.miseTotale = '';\n    this.montantGain = '';\n    this.message = '';\n    this.prixTotal = '';\n    this.barcode.nativeElement.value = '';\n    this.isBarcodeLength = true;\n  }\n  onKeyBarcodeEvent(event) {\n    var barcode = event.target.value;\n    //console.log(barcode);\n    //console.log(\"Event length: \" + barcode.length)\n    this.isBarcodeLength = barcode.length > 17 ? false : true;\n  }\n  searchBarcode(event) {\n    var barcode = event.target.value;\n    this.isBarcodeLength = barcode.length > 17 ? false : true;\n    if (this.isBarcodeLength) return;\n    console.log(\"Can process...\");\n  }\n  getStatuVersement() {\n    if (this.statutVersement !== '' && this.statutVersement !== undefined) {\n      return Statut.TCKALRPAID;\n    }\n  }\n  getClassOf(val) {\n    if (val === 'perdant') {\n      return 'red';\n    } else if (val === 'gagnant') {\n      return 'green';\n    }\n  }\n  getMessageClass() {\n    if (this.message === 'Perdant') {\n      return 'red';\n    } else if (this.message === 'Gagnant') {\n      return 'green';\n    } else {\n      return 'warning';\n    }\n  }\n};\n__decorate([ViewChild(MatPaginator), __metadata(\"design:type\", MatPaginator)], PaymentComponent.prototype, \"paginator\", void 0);\n__decorate([ViewChild(MatSort), __metadata(\"design:type\", MatSort)], PaymentComponent.prototype, \"sort\", void 0);\n__decorate([ViewChild('barcode'), __metadata(\"design:type\", ElementRef)], PaymentComponent.prototype, \"barcode\", void 0);\nPaymentComponent = __decorate([Component({\n  selector: 'ngx-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.scss']\n}), __metadata(\"design:paramtypes\", [typeof (_a = typeof BettingService !== \"undefined\" && BettingService) === \"function\" ? _a : Object])], PaymentComponent);\nexport { PaymentComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export function firstNumber(selection) {}\nexport function firstOdd(selection) {}\nexport function lastOdd(selection) {}\nexport function firstEven(selection) {}\nexport function lastEven(selection) {}\nexport function numSimple(selection) {}\nexport function verifier(echar) {\n  let __echar = [];\n  let v = false;\n  __echar = echar.split(\".\");\n  if (__echar.length > 1) v = true;\n  return v;\n}\nexport function verifierChoice(selection) {\n  let message = {};\n  let multiplicite = 1;\n  var _echar = selection.trim().substring(1).split('-');\n  // Verification du nombre de numeros saisi pour le pari\n  if (_echar.length < 1 || _echar.length > 10) {\n    message = {\n      \"isError\": true,\n      \"message\": \"Choix entre 1 et 10\"\n    };\n    return message;\n  }\n  for (let j = 0; j < _echar.length; j++) {\n    if (isNaN(+_echar[j]) === true) {\n      // Check if value provided is a number\n      //check possible multiple round\n      if (j === _echar.length - 1) {\n        var multiChar = _echar[j].toLowerCase().split(\"n\");\n        if (multiChar.length < 2) {\n          message = {\n            \"isError\": true,\n            \"message\": \"Mauvaise saisie\"\n          };\n          return message;\n        }\n        if (Number.isInteger(parseInt(multiChar[0])) === false) {\n          message = {\n            \"isError\": true,\n            \"message\": \"Mauvaise saisie\"\n          };\n          return message;\n        }\n        if (Number.isInteger(parseInt(multiChar[1])) === false) {\n          message = {\n            \"isError\": true,\n            \"message\": \"Multiplicité incorrecte (1 - 6)\"\n          };\n          return message;\n        }\n        if (parseInt(multiChar[0]) < 1 || parseInt(multiChar[0]) > 80) {\n          message = {\n            \"isError\": true,\n            \"message\": \"Saisi incorrecte (1 - 80)\"\n          };\n          return message;\n        }\n        if (parseInt(multiChar[1]) > 6) {\n          message = {\n            \"isError\": true,\n            \"message\": \"Multiplicité incorrecte (1 - 6)\"\n          };\n          return message;\n        }\n        _echar.pop();\n        _echar.push(multiChar[0]);\n        multiplicite = parseInt(multiChar[1]);\n      } else {\n        message = {\n          \"isError\": true,\n          \"message\": \"Mauvaise saisie\"\n        };\n        return message;\n      }\n    } else {\n      // Check if the given number is between 1 and 80 (Keno's rules)\n      if (parseInt(_echar[j]) < 1 || parseInt(_echar[j]) > 80) {\n        message = {\n          \"isError\": true,\n          \"message\": \"Saisi incorrecte (1 - 80)\"\n        };\n        return message;\n      }\n    }\n  }\n  // Check if there is repeated number\n  const uniqueArray = array => Array.from(new Set(array));\n  var sameEchar = uniqueArray(_echar);\n  if (sameEchar.length !== _echar.length) {\n    message = {\n      \"isError\": true,\n      \"message\": \"Numéro dupliqué\"\n    };\n    return message;\n  }\n  var _echars = _echar.map(e => parseInt(e));\n  _echars = _echars.sort(function (a, b) {\n    return a - b;\n  });\n  message = {\n    \"isError\": false,\n    \"multiplicite\": multiplicite,\n    \"data\": _echars.join('-')\n  };\n  return message;\n}\nexport * from '.';","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { NbLayoutDirectionService, NbLayoutDirection } from '@nebular/theme';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@nebular/theme\";\nimport * as i2 from \"../switcher/switcher.component\";\nexport let LayoutDirectionSwitcherComponent = /*#__PURE__*/(() => {\n  class LayoutDirectionSwitcherComponent {\n    constructor(directionService) {\n      this.directionService = directionService;\n      this.destroy$ = new Subject();\n      this.directions = NbLayoutDirection;\n      this.vertical = false;\n      this.currentDirection = this.directionService.getDirection();\n      this.directionService.onDirectionChange().pipe(takeUntil(this.destroy$)).subscribe(newDirection => this.currentDirection = newDirection);\n    }\n    toggleDirection(newDirection) {\n      this.directionService.setDirection(newDirection);\n    }\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n  }\n  LayoutDirectionSwitcherComponent.ɵfac = function LayoutDirectionSwitcherComponent_Factory(t) {\n    return new (t || LayoutDirectionSwitcherComponent)(i0.ɵɵdirectiveInject(i1.NbLayoutDirectionService));\n  };\n  LayoutDirectionSwitcherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LayoutDirectionSwitcherComponent,\n    selectors: [[\"ngx-layout-direction-switcher\"]],\n    inputs: {\n      vertical: \"vertical\"\n    },\n    decls: 1,\n    vars: 6,\n    consts: [[3, \"firstValue\", \"secondValue\", \"firstValueLabel\", \"secondValueLabel\", \"value\", \"vertical\", \"valueChange\"]],\n    template: function LayoutDirectionSwitcherComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ngx-switcher\", 0);\n        i0.ɵɵlistener(\"valueChange\", function LayoutDirectionSwitcherComponent_Template_ngx_switcher_valueChange_0_listener($event) {\n          return ctx.toggleDirection($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"firstValue\", ctx.directions.RTL)(\"secondValue\", ctx.directions.LTR)(\"firstValueLabel\", \"RTL\")(\"secondValueLabel\", \"LTR\")(\"value\", ctx.currentDirection)(\"vertical\", ctx.vertical);\n      }\n    },\n    dependencies: [i2.SwitcherComponent],\n    encapsulation: 2\n  });\n  return LayoutDirectionSwitcherComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
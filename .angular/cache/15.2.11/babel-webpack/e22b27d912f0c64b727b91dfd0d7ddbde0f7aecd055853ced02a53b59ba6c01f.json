{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Directive, Input, HostListener, NgModule } from '@angular/core';\nlet PrintBase = /*#__PURE__*/(() => {\n  class PrintBase {\n    _printStyle = [];\n    _styleSheetFile = '';\n    //#region Getters and Setters\n    /**\n     * Sets the print styles based on the provided values.\n     *\n     * @param {Object} values - Key-value pairs representing print styles.\n     * @protected\n     */\n    setPrintStyle(values) {\n      this._printStyle = [];\n      for (let key in values) {\n        if (values.hasOwnProperty(key)) {\n          this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\n        }\n      }\n    }\n    /**\n     *\n     *\n     * @returns the string that create the stylesheet which will be injected\n     * later within <style></style> tag.\n     *\n     * -join/replace to transform an array objects to css-styled string\n     */\n    returnStyleValues() {\n      return `<style> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;\n    }\n    /**\n    * @returns string which contains the link tags containing the css which will\n    * be injected later within <head></head> tag.\n    *\n    */\n    returnStyleSheetLinkTags() {\n      return this._styleSheetFile;\n    }\n    /**\n     * Sets the style sheet file based on the provided CSS list.\n     *\n     * @param {string} cssList - CSS file or list of CSS files.\n     * @protected\n     */\n    setStyleSheetFile(cssList) {\n      let linkTagFn = function (cssFileName) {\n        return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\n      };\n      if (cssList.indexOf(',') !== -1) {\n        const valueArr = cssList.split(',');\n        this._styleSheetFile = valueArr.map(val => linkTagFn(val)).join('');\n      } else {\n        this._styleSheetFile = linkTagFn(cssList);\n      }\n    }\n    //#endregion\n    //#region Private methods used by PrintBase\n    /**\n     * Updates the default values for input elements.\n     *\n     * @param {HTMLCollectionOf<HTMLInputElement>} elements - Collection of input elements.\n     * @private\n     */\n    updateInputDefaults(elements) {\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n        element['defaultValue'] = element.value;\n        if (element['checked']) element['defaultChecked'] = true;\n      }\n    }\n    /**\n     * Updates the default values for select elements.\n     *\n     * @param {HTMLCollectionOf<HTMLSelectElement>} elements - Collection of select elements.\n     * @private\n     */\n    updateSelectDefaults(elements) {\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n        const selectedIdx = element.selectedIndex;\n        const selectedOption = element.options[selectedIdx];\n        selectedOption.defaultSelected = true;\n      }\n    }\n    /**\n     * Updates the default values for textarea elements.\n     *\n     * @param {HTMLCollectionOf<HTMLTextAreaElement>} elements - Collection of textarea elements.\n     * @private\n     */\n    updateTextAreaDefaults(elements) {\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n        element['defaultValue'] = element.value;\n      }\n    }\n    /**\n     * Converts a canvas element to an image and returns its HTML string.\n     *\n     * @param {HTMLCanvasElement} element - The canvas element to convert.\n     * @returns {string} - HTML string of the image.\n     * @private\n     */\n    canvasToImageHtml(element) {\n      const dataUrl = element.toDataURL();\n      return `<img src=\"${dataUrl}\" style=\"max-width: 100%;\">`;\n    }\n    /**\n     * Includes canvas contents in the print section via img tags.\n     *\n     * @param {HTMLCollectionOf<HTMLCanvasElement>} elements - Collection of canvas elements.\n     * @private\n     */\n    updateCanvasToImage(elements) {\n      for (let i = 0; i < elements.length; i++) {\n        const element = this.canvasToImageHtml(elements[i]);\n        elements[i].insertAdjacentHTML('afterend', element);\n        elements[i].remove();\n      }\n    }\n    /**\n     * Retrieves the HTML content of a specified printing section.\n     *\n     * @param {string} printSectionId - Id of the printing section.\n     * @returns {string | null} - HTML content of the printing section, or null if not found.\n     * @private\n     */\n    getHtmlContents(printSectionId) {\n      const printContents = document.getElementById(printSectionId);\n      if (!printContents) return null;\n      const inputEls = printContents.getElementsByTagName('input');\n      const selectEls = printContents.getElementsByTagName('select');\n      const textAreaEls = printContents.getElementsByTagName('textarea');\n      const canvasEls = printContents.getElementsByTagName('canvas');\n      this.updateInputDefaults(inputEls);\n      this.updateSelectDefaults(selectEls);\n      this.updateTextAreaDefaults(textAreaEls);\n      this.updateCanvasToImage(canvasEls);\n      return printContents.innerHTML;\n    }\n    /**\n     * Retrieves the HTML content of elements with the specified tag.\n     *\n     * @param {keyof HTMLElementTagNameMap} tag - HTML tag name.\n     * @returns {string} - Concatenated outerHTML of elements with the specified tag.\n     * @private\n     */\n    getElementTag(tag) {\n      const html = [];\n      const elements = document.getElementsByTagName(tag);\n      for (let index = 0; index < elements.length; index++) {\n        html.push(elements[index].outerHTML);\n      }\n      return html.join('\\r\\n');\n    }\n    //#endregion\n    /**\n     * Prints the specified content using the provided print options.\n     *\n     * @param {PrintOptions} printOptions - Options for printing.\n     * @public\n     */\n    print(printOptions) {\n      let styles = '',\n        links = '',\n        popOut = 'top=0,left=0,height=auto,width=auto';\n      const baseTag = this.getElementTag('base');\n      if (printOptions.useExistingCss) {\n        styles = this.getElementTag('style');\n        links = this.getElementTag('link');\n      }\n      // If the openNewTab option is set to true, then set the popOut option to an empty string. \n      // This will cause the print dialog to open in a new tab.\n      if (printOptions.openNewTab) {\n        popOut = '';\n      }\n      const printContents = this.getHtmlContents(printOptions.printSectionId);\n      if (!printContents) {\n        // Handle the case where the specified print section is not found.\n        console.error(`Print section with id ${printOptions.printSectionId} not found.`);\n        return;\n      }\n      const popupWin = window.open(\"\", \"_blank\", popOut);\n      if (!popupWin) {\n        // the popup window could not be opened.\n        console.error('Could not open print window.');\n        return;\n      }\n      popupWin.document.open();\n      popupWin.document.write(`\n          <html>\n            <head>\n              <title>${printOptions.printTitle ? printOptions.printTitle : \"\"}</title>\n              ${baseTag}\n              ${this.returnStyleValues()}\n              ${this.returnStyleSheetLinkTags()}\n              ${styles}\n              ${links}\n            </head>\n            <body ${printOptions.bodyClass ? `class=\"${printOptions.bodyClass}\"` : ''}>\n              ${printContents}\n              <script defer>\n                function triggerPrint(event) {\n                  window.removeEventListener('load', triggerPrint, false);\n                  ${printOptions.previewOnly ? '' : `setTimeout(function() {\n                    closeWindow(window.print());\n                  }, ${printOptions.printDelay});`}\n                }\n                function closeWindow(){\n                  ${printOptions.closeWindow ? 'window.close();' : ''}\n                }\n                window.addEventListener('load', triggerPrint, false);\n              </script>\n            </body>\n          </html>`);\n      popupWin.document.close();\n    }\n    static ɵfac = function PrintBase_Factory(t) {\n      return new (t || PrintBase)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: PrintBase,\n      factory: PrintBase.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return PrintBase;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Service for handling printing functionality in Angular applications.\n * Extends the base printing class (PrintBase).\n *\n * @export\n * @class NgxPrintService\n * @extends {PrintBase}\n */\nlet NgxPrintService = /*#__PURE__*/(() => {\n  class NgxPrintService extends PrintBase {\n    /**\n     * Initiates the printing process using the provided print options.\n     *\n     * @param {PrintOptions} printOptions - Options for configuring the printing process.\n     * @memberof NgxPrintService\n     * @returns {void}\n     */\n    print(printOptions) {\n      // Call the print method in the parent class\n      super.print(printOptions);\n    }\n    /**\n     * Sets the print style for the printing process.\n     *\n     * @param {{ [key: string]: { [key: string]: string } }} values - A dictionary representing the print styles.\n     * @memberof NgxPrintService\n     * @setter\n     */\n    set printStyle(values) {\n      super.setPrintStyle(values);\n    }\n    /**\n     * Sets the stylesheet file for the printing process.\n     *\n     * @param {string} cssList - A string representing the path to the stylesheet file.\n     * @memberof NgxPrintService\n     * @setter\n     */\n    set styleSheetFile(cssList) {\n      super.setStyleSheetFile(cssList);\n    }\n    static ɵfac = /* @__PURE__ */function () {\n      let ɵNgxPrintService_BaseFactory;\n      return function NgxPrintService_Factory(t) {\n        return (ɵNgxPrintService_BaseFactory || (ɵNgxPrintService_BaseFactory = i0.ɵɵgetInheritedFactory(NgxPrintService)))(t || NgxPrintService);\n      };\n    }();\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxPrintService,\n      factory: NgxPrintService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return NgxPrintService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nclass PrintOptions {\n  printSectionId = null;\n  printTitle = null;\n  useExistingCss = false;\n  bodyClass = '';\n  openNewTab = false;\n  previewOnly = false;\n  closeWindow = true;\n  printDelay = 0;\n  constructor(options) {\n    if (options) {\n      Object.assign(this, options);\n    }\n  }\n}\nlet NgxPrintDirective = /*#__PURE__*/(() => {\n  class NgxPrintDirective extends PrintBase {\n    printOptions = new PrintOptions();\n    /**\n     * Prevents the print dialog from opening on the window\n     *\n     * @memberof NgxPrintDirective\n     */\n    set previewOnly(value) {\n      this.printOptions = {\n        ...this.printOptions,\n        previewOnly: value\n      };\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    set printSectionId(value) {\n      this.printOptions = {\n        ...this.printOptions,\n        printSectionId: value\n      };\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    set printTitle(value) {\n      this.printOptions = {\n        ...this.printOptions,\n        printTitle: value\n      };\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    set useExistingCss(value) {\n      this.printOptions = {\n        ...this.printOptions,\n        useExistingCss: value\n      };\n    }\n    /**\n     * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\n     *\n     * @memberof NgxPrintDirective\n     */\n    set printDelay(value) {\n      this.printOptions = {\n        ...this.printOptions,\n        printDelay: value\n      };\n    }\n    /**\n     * Whether to close the window after print() returns.\n     *\n     */\n    set closeWindow(value) {\n      this.printOptions = {\n        ...this.printOptions,\n        closeWindow: value\n      };\n    }\n    /**\n     * Class attribute to apply to the body element.\n     *\n     */\n    set bodyClass(value) {\n      this.printOptions = {\n        ...this.printOptions,\n        bodyClass: value\n      };\n    }\n    /**\n     * Whether to open a new window or default to new window.\n     *\n     */\n    set openNewTab(value) {\n      this.printOptions = {\n        ...this.printOptions,\n        openNewTab: value\n      };\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    set printStyle(values) {\n      super.setPrintStyle(values);\n    }\n    /**\n     * @memberof NgxPrintDirective\n     * @param cssList\n     */\n    set styleSheetFile(cssList) {\n      super.setStyleSheetFile(cssList);\n    }\n    /**\n     *\n     *\n     * @memberof NgxPrintDirective\n     */\n    print() {\n      super.print(this.printOptions);\n    }\n    static ɵfac = /* @__PURE__ */function () {\n      let ɵNgxPrintDirective_BaseFactory;\n      return function NgxPrintDirective_Factory(t) {\n        return (ɵNgxPrintDirective_BaseFactory || (ɵNgxPrintDirective_BaseFactory = i0.ɵɵgetInheritedFactory(NgxPrintDirective)))(t || NgxPrintDirective);\n      };\n    }();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: NgxPrintDirective,\n      selectors: [[\"button\", \"ngxPrint\", \"\"]],\n      hostBindings: function NgxPrintDirective_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function NgxPrintDirective_click_HostBindingHandler() {\n            return ctx.print();\n          });\n        }\n      },\n      inputs: {\n        previewOnly: \"previewOnly\",\n        printSectionId: \"printSectionId\",\n        printTitle: \"printTitle\",\n        useExistingCss: \"useExistingCss\",\n        printDelay: \"printDelay\",\n        closeWindow: \"closeWindow\",\n        bodyClass: \"bodyClass\",\n        openNewTab: \"openNewTab\",\n        printStyle: \"printStyle\",\n        styleSheetFile: \"styleSheetFile\"\n      },\n      standalone: true,\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return NgxPrintDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet NgxPrintModule = /*#__PURE__*/(() => {\n  class NgxPrintModule {\n    static ɵfac = function NgxPrintModule_Factory(t) {\n      return new (t || NgxPrintModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxPrintModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  }\n  return NgxPrintModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ngx-print\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxPrintDirective, NgxPrintModule, NgxPrintService, PrintOptions };\n//# sourceMappingURL=ngx-print.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
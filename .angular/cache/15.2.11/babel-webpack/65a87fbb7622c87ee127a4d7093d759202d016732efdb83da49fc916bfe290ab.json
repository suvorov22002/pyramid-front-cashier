{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/*eslint no-console: 0 */\n\nvar ErrorHandler = function () {\n  function ErrorHandler(api) {\n    _classCallCheck(this, ErrorHandler);\n    this.api = api;\n  }\n  _createClass(ErrorHandler, [{\n    key: \"handleCatch\",\n    value: function handleCatch(e) {\n      // If babel supported extending of Error in a correct way instanceof would be used here\n      if (e.name === \"InvalidInputException\") {\n        if (this.api._options.valid !== this.api._defaults.valid) {\n          this.api._options.valid(false);\n        } else {\n          throw e.message;\n        }\n      } else {\n        throw e;\n      }\n      this.api.render = function () {};\n    }\n  }, {\n    key: \"wrapBarcodeCall\",\n    value: function wrapBarcodeCall(func) {\n      try {\n        var result = func.apply(undefined, arguments);\n        this.api._options.valid(true);\n        return result;\n      } catch (e) {\n        this.handleCatch(e);\n        return this.api;\n      }\n    }\n  }]);\n  return ErrorHandler;\n}();\nexports.default = ErrorHandler;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
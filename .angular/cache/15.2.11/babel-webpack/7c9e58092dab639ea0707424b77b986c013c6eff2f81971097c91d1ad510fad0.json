{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\nvar _merge = require(\"../help/merge.js\");\nvar _merge2 = _interopRequireDefault(_merge);\nvar _shared = require(\"./shared.js\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar svgns = \"http://www.w3.org/2000/svg\";\nvar SVGRenderer = function () {\n  function SVGRenderer(svg, encodings, options) {\n    _classCallCheck(this, SVGRenderer);\n    this.svg = svg;\n    this.encodings = encodings;\n    this.options = options;\n    this.document = options.xmlDocument || document;\n  }\n  _createClass(SVGRenderer, [{\n    key: \"render\",\n    value: function render() {\n      var currentX = this.options.marginLeft;\n      this.prepareSVG();\n      for (var i = 0; i < this.encodings.length; i++) {\n        var encoding = this.encodings[i];\n        var encodingOptions = (0, _merge2.default)(this.options, encoding.options);\n        var group = this.createGroup(currentX, encodingOptions.marginTop, this.svg);\n        this.setGroupOptions(group, encodingOptions);\n        this.drawSvgBarcode(group, encodingOptions, encoding);\n        this.drawSVGText(group, encodingOptions, encoding);\n        currentX += encoding.width;\n      }\n    }\n  }, {\n    key: \"prepareSVG\",\n    value: function prepareSVG() {\n      // Clear the SVG\n      while (this.svg.firstChild) {\n        this.svg.removeChild(this.svg.firstChild);\n      }\n      (0, _shared.calculateEncodingAttributes)(this.encodings, this.options);\n      var totalWidth = (0, _shared.getTotalWidthOfEncodings)(this.encodings);\n      var maxHeight = (0, _shared.getMaximumHeightOfEncodings)(this.encodings);\n      var width = totalWidth + this.options.marginLeft + this.options.marginRight;\n      this.setSvgAttributes(width, maxHeight);\n      if (this.options.background) {\n        this.drawRect(0, 0, width, maxHeight, this.svg).setAttribute(\"style\", \"fill:\" + this.options.background + \";\");\n      }\n    }\n  }, {\n    key: \"drawSvgBarcode\",\n    value: function drawSvgBarcode(parent, options, encoding) {\n      var binary = encoding.data;\n\n      // Creates the barcode out of the encoded binary\n      var yFrom;\n      if (options.textPosition == \"top\") {\n        yFrom = options.fontSize + options.textMargin;\n      } else {\n        yFrom = 0;\n      }\n      var barWidth = 0;\n      var x = 0;\n      for (var b = 0; b < binary.length; b++) {\n        x = b * options.width + encoding.barcodePadding;\n        if (binary[b] === \"1\") {\n          barWidth++;\n        } else if (barWidth > 0) {\n          this.drawRect(x - options.width * barWidth, yFrom, options.width * barWidth, options.height, parent);\n          barWidth = 0;\n        }\n      }\n\n      // Last draw is needed since the barcode ends with 1\n      if (barWidth > 0) {\n        this.drawRect(x - options.width * (barWidth - 1), yFrom, options.width * barWidth, options.height, parent);\n      }\n    }\n  }, {\n    key: \"drawSVGText\",\n    value: function drawSVGText(parent, options, encoding) {\n      var textElem = this.document.createElementNS(svgns, 'text');\n\n      // Draw the text if displayValue is set\n      if (options.displayValue) {\n        var x, y;\n        textElem.setAttribute(\"style\", \"font:\" + options.fontOptions + \" \" + options.fontSize + \"px \" + options.font);\n        if (options.textPosition == \"top\") {\n          y = options.fontSize - options.textMargin;\n        } else {\n          y = options.height + options.textMargin + options.fontSize;\n        }\n\n        // Draw the text in the correct X depending on the textAlign option\n        if (options.textAlign == \"left\" || encoding.barcodePadding > 0) {\n          x = 0;\n          textElem.setAttribute(\"text-anchor\", \"start\");\n        } else if (options.textAlign == \"right\") {\n          x = encoding.width - 1;\n          textElem.setAttribute(\"text-anchor\", \"end\");\n        }\n        // In all other cases, center the text\n        else {\n          x = encoding.width / 2;\n          textElem.setAttribute(\"text-anchor\", \"middle\");\n        }\n        textElem.setAttribute(\"x\", x);\n        textElem.setAttribute(\"y\", y);\n        textElem.appendChild(this.document.createTextNode(encoding.text));\n        parent.appendChild(textElem);\n      }\n    }\n  }, {\n    key: \"setSvgAttributes\",\n    value: function setSvgAttributes(width, height) {\n      var svg = this.svg;\n      svg.setAttribute(\"width\", width + \"px\");\n      svg.setAttribute(\"height\", height + \"px\");\n      svg.setAttribute(\"x\", \"0px\");\n      svg.setAttribute(\"y\", \"0px\");\n      svg.setAttribute(\"viewBox\", \"0 0 \" + width + \" \" + height);\n      svg.setAttribute(\"xmlns\", svgns);\n      svg.setAttribute(\"version\", \"1.1\");\n      svg.setAttribute(\"style\", \"transform: translate(0,0)\");\n    }\n  }, {\n    key: \"createGroup\",\n    value: function createGroup(x, y, parent) {\n      var group = this.document.createElementNS(svgns, 'g');\n      group.setAttribute(\"transform\", \"translate(\" + x + \", \" + y + \")\");\n      parent.appendChild(group);\n      return group;\n    }\n  }, {\n    key: \"setGroupOptions\",\n    value: function setGroupOptions(group, options) {\n      group.setAttribute(\"style\", \"fill:\" + options.lineColor + \";\");\n    }\n  }, {\n    key: \"drawRect\",\n    value: function drawRect(x, y, width, height, parent) {\n      var rect = this.document.createElementNS(svgns, 'rect');\n      rect.setAttribute(\"x\", x);\n      rect.setAttribute(\"y\", y);\n      rect.setAttribute(\"width\", width);\n      rect.setAttribute(\"height\", height);\n      parent.appendChild(rect);\n      return rect;\n    }\n  }]);\n  return SVGRenderer;\n}();\nexports.default = SVGRenderer;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}
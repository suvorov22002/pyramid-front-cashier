{"ast":null,"code":"import { Directive, HostListener, Input, NgModule } from '@angular/core';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nimport * as ɵngcc0 from '@angular/core';\nlet NgxPrintDirective = /*#__PURE__*/(() => {\n  class NgxPrintDirective {\n    constructor() {\n      this._printStyle = [];\n      /**\r\n       *\r\n       *\r\n       * \\@memberof NgxPrintDirective\r\n       */\n      this.useExistingCss = false;\n      /**\r\n       * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\r\n       *\r\n       * \\@memberof NgxPrintDirective\r\n       */\n      this.printDelay = 0;\n      /**\r\n       *\r\n       *\r\n       * @return html for the given tag\r\n       *\r\n       * \\@memberof NgxPrintDirective\r\n       */\n      this._styleSheetFile = '';\n    }\n    /**\r\n     *\r\n     *\r\n     * \\@memberof NgxPrintDirective\r\n     * @param {?} values\r\n     * @return {?}\r\n     */\n    set printStyle(values) {\n      for (let key in values) {\n        if (values.hasOwnProperty(key)) {\n          this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\n        }\n      }\n      this.returnStyleValues();\n    }\n    /**\r\n     *\r\n     *\r\n     * \\@memberof NgxPrintDirective\r\n     * @return {?} the string that create the stylesheet which will be injected\r\n     * later within <style></style> tag.\r\n     *\r\n     * -join/replace to transform an array objects to css-styled string\r\n     *\r\n     */\n    returnStyleValues() {\n      return `<style> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;\n    }\n    /**\r\n     * \\@memberof NgxPrintDirective\r\n     * @param {?} cssList\r\n     * @return {?}\r\n     */\n    set styleSheetFile(cssList) {\n      /** @type {?} */\n      let linkTagFn =\n      /**\r\n      * @param {?} cssFileName\r\n      * @return {?}\r\n      */\n      function (cssFileName) {\n        return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\n      };\n      if (cssList.indexOf(',') !== -1) {\n        /** @type {?} */\n        const valueArr = cssList.split(',');\n        for (let val of valueArr) {\n          this._styleSheetFile = this._styleSheetFile + linkTagFn(val);\n        }\n      } else {\n        this._styleSheetFile = linkTagFn(cssList);\n      }\n    }\n    /**\r\n     * @private\r\n     * @return {?} string which contains the link tags containing the css which will\r\n     * be injected later within <head></head> tag.\r\n     *\r\n     */\n    returnStyleSheetLinkTags() {\n      return this._styleSheetFile;\n    }\n    /**\r\n     * @private\r\n     * @param {?} tag\r\n     * @return {?}\r\n     */\n    getElementTag(tag) {\n      /** @type {?} */\n      const html = [];\n      /** @type {?} */\n      const elements = document.getElementsByTagName(tag);\n      for (let index = 0; index < elements.length; index++) {\n        html.push(elements[index].outerHTML);\n      }\n      return html.join('\\r\\n');\n    }\n    /**\r\n     *\r\n     * @private\r\n     * @param {?} data the html element collection to save defaults to\r\n     *\r\n     * @return {?}\r\n     */\n    getFormData(data) {\n      for (var i = 0; i < data.length; i++) {\n        data[i].defaultValue = data[i].value;\n        if (data[i].checked) {\n          data[i].defaultChecked = true;\n        }\n      }\n    }\n    /**\r\n     * @private\r\n     * @return {?} html section to be printed along with some associated inputs\r\n     *\r\n     */\n    getHtmlContents() {\n      /** @type {?} */\n      let printContents = document.getElementById(this.printSectionId);\n      /** @type {?} */\n      let innards = printContents.getElementsByTagName('input');\n      this.getFormData(innards);\n      /** @type {?} */\n      let txt = printContents.getElementsByTagName('textarea');\n      this.getFormData(txt);\n      return printContents.innerHTML;\n    }\n    /**\r\n     *\r\n     *\r\n     * \\@memberof NgxPrintDirective\r\n     * @return {?}\r\n     */\n    print() {\n      /** @type {?} */\n      let printContents;\n      /** @type {?} */\n      let popupWin;\n      /** @type {?} */\n      let styles = '';\n      /** @type {?} */\n      let links = '';\n      /** @type {?} */\n      const baseTag = this.getElementTag('base');\n      if (this.useExistingCss) {\n        styles = this.getElementTag('style');\n        links = this.getElementTag('link');\n      }\n      printContents = this.getHtmlContents();\n      popupWin = window.open(\"\", \"_blank\", \"top=0,left=0,height=auto,width=auto\");\n      popupWin.document.open();\n      popupWin.document.write(`\n      <html>\n        <head>\n          <title>${this.printTitle ? this.printTitle : \"\"}</title>\n          ${baseTag}\n          ${this.returnStyleValues()}\n          ${this.returnStyleSheetLinkTags()}\n          ${styles}\n          ${links}\n        </head>\n        <body>\n          ${printContents}\n          <script defer>\n            function triggerPrint(event) {\n              window.removeEventListener('load', triggerPrint, false);\n              setTimeout(function() {\n                closeWindow(window.print());\n              }, ${this.printDelay});\n            }\n            function closeWindow(){\n                window.close();\n            }\n            window.addEventListener('load', triggerPrint, false);\n          </script>\n        </body>\n      </html>`);\n      popupWin.document.close();\n    }\n  }\n  NgxPrintDirective.ɵfac = function NgxPrintDirective_Factory(t) {\n    return new (t || NgxPrintDirective)();\n  };\n  NgxPrintDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgxPrintDirective,\n    selectors: [[\"button\", \"ngxPrint\", \"\"]],\n    hostBindings: function NgxPrintDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NgxPrintDirective_click_HostBindingHandler() {\n          return ctx.print();\n        });\n      }\n    },\n    inputs: {\n      useExistingCss: \"useExistingCss\",\n      printDelay: \"printDelay\",\n      printStyle: \"printStyle\",\n      styleSheetFile: \"styleSheetFile\",\n      printSectionId: \"printSectionId\",\n      printTitle: \"printTitle\"\n    }\n  });\n  return NgxPrintDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\nlet NgxPrintModule = /*#__PURE__*/(() => {\n  class NgxPrintModule {}\n  NgxPrintModule.ɵfac = function NgxPrintModule_Factory(t) {\n    return new (t || NgxPrintModule)();\n  };\n  NgxPrintModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxPrintModule\n  });\n  NgxPrintModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return NgxPrintModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPrintModule, {\n    declarations: [NgxPrintDirective],\n    exports: [NgxPrintDirective]\n  });\n})();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxPrintDirective, NgxPrintModule };\n\n//# sourceMappingURL=ngx-print.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
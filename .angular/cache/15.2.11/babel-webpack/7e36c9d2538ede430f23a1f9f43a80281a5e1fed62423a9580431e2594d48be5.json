{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _CODE2 = require('./CODE128');\nvar _CODE3 = _interopRequireDefault(_CODE2);\nvar _auto = require('./auto');\nvar _auto2 = _interopRequireDefault(_auto);\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\nvar CODE128AUTO = function (_CODE) {\n  _inherits(CODE128AUTO, _CODE);\n  function CODE128AUTO(data, options) {\n    _classCallCheck(this, CODE128AUTO);\n\n    // ASCII value ranges 0-127, 200-211\n    if (/^[\\x00-\\x7F\\xC8-\\xD3]+$/.test(data)) {\n      var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, (0, _auto2.default)(data), options));\n    } else {\n      var _this = _possibleConstructorReturn(this, (CODE128AUTO.__proto__ || Object.getPrototypeOf(CODE128AUTO)).call(this, data, options));\n    }\n    return _possibleConstructorReturn(_this);\n  }\n  return CODE128AUTO;\n}(_CODE3.default);\nexports.default = CODE128AUTO;","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}